[{"D:\\project_javascript\\nuber-eats-frontend\\src\\index.tsx":"1","D:\\project_javascript\\nuber-eats-frontend\\src\\reportWebVitals.ts":"2","D:\\project_javascript\\nuber-eats-frontend\\src\\apollo.ts":"3","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\login.tsx":"4","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\create-account.tsx":"5","D:\\project_javascript\\nuber-eats-frontend\\src\\components\\form-error.tsx":"6","D:\\project_javascript\\nuber-eats-frontend\\src\\components\\button.tsx":"7","D:\\project_javascript\\nuber-eats-frontend\\src\\constants.ts":"8","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\404.tsx":"9","D:\\project_javascript\\nuber-eats-frontend\\src\\components\\header.tsx":"10","D:\\project_javascript\\nuber-eats-frontend\\src\\hooks\\useMe.tsx":"11","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx":"12","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx":"13","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx":"14","D:\\project_javascript\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts":"15","D:\\project_javascript\\nuber-eats-frontend\\src\\components\\restaurant.tsx":"16","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\search.tsx":"17","D:\\project_javascript\\nuber-eats-frontend\\src\\fragments.ts":"18","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\category.tsx":"19","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx":"20","D:\\project_javascript\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx":"21","D:\\project_javascript\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx":"22"},{"size":755,"mtime":1612308962026,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1611290805718,"results":"25","hashOfConfig":"24"},{"size":1517,"mtime":1612309829477,"results":"26","hashOfConfig":"24"},{"size":4637,"mtime":1612308898309,"results":"27","hashOfConfig":"24"},{"size":4599,"mtime":1614640887879,"results":"28","hashOfConfig":"24"},{"size":246,"mtime":1611876771586,"results":"29","hashOfConfig":"24"},{"size":545,"mtime":1612222717141,"results":"30","hashOfConfig":"24"},{"size":44,"mtime":1614294956804,"results":"31","hashOfConfig":"24"},{"size":644,"mtime":1613517341071,"results":"32","hashOfConfig":"24"},{"size":1008,"mtime":1612857031502,"results":"33","hashOfConfig":"24"},{"size":298,"mtime":1612480873026,"results":"34","hashOfConfig":"24"},{"size":4349,"mtime":1613603509598,"results":"35","hashOfConfig":"24"},{"size":2560,"mtime":1613517334088,"results":"36","hashOfConfig":"24"},{"size":3614,"mtime":1613517330402,"results":"37","hashOfConfig":"24"},{"size":1139,"mtime":1614728808185,"results":"38","hashOfConfig":"24"},{"size":730,"mtime":1613604368713,"results":"39","hashOfConfig":"24"},{"size":1564,"mtime":1613518476186,"results":"40","hashOfConfig":"24"},{"size":652,"mtime":1613519461091,"results":"41","hashOfConfig":"24"},{"size":1224,"mtime":1613603606876,"results":"42","hashOfConfig":"24"},{"size":1500,"mtime":1613605787742,"results":"43","hashOfConfig":"24"},{"size":1782,"mtime":1613690599407,"results":"44","hashOfConfig":"24"},{"size":594,"mtime":1613690601161,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"r4q80p",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"51"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\project_javascript\\nuber-eats-frontend\\src\\index.tsx",[],["101","102"],"D:\\project_javascript\\nuber-eats-frontend\\src\\reportWebVitals.ts",[],["103","104"],"D:\\project_javascript\\nuber-eats-frontend\\src\\apollo.ts",[],["105","106"],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\login.tsx",["107","108","109","110","111","112","113"],"import { ApolloError, gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { authToken, isLoggedInVar } from \"../apollo\";\r\nimport { Button } from \"../components/button\";\r\nimport { FormError } from \"../components/form-error\";\r\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\r\nimport nuberLogo from \"../images/logo.svg\";\r\nimport {\r\n  loginMutation,\r\n  loginMutationVariables,\r\n} from \"../__generated__/loginMutation\";\r\n\r\ninterface ILoginForm {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation loginMutation($loginInput: LoginInput!) {\r\n    login(input: $loginInput) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Login = () => {\r\n  const {\r\n    register,\r\n    getValues,\r\n    errors,\r\n    handleSubmit,\r\n    watch,\r\n    formState,\r\n  } = useForm<ILoginForm>({\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  const onCompleted = (data: loginMutation) => {\r\n    const {\r\n      login: { error, ok, token },\r\n    } = data;\r\n\r\n    if (ok && token) {\r\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\r\n      authToken(token);\r\n      isLoggedInVar(true);\r\n    }\r\n  };\r\n\r\n  const [\r\n    loginMutation,\r\n    { loading, error, data: loginMutationResult },\r\n  ] = useMutation<loginMutation, loginMutationVariables>(LOGIN_MUTATION, {\r\n    onCompleted,\r\n  });\r\n  /*\r\n  //뮤테이션 선언 시 변수를 설정할 수도 있음. (watch는 react-hook-form에 있는 함수로, 변수의 변화가 발생할 때 알려줌)\r\n  const [loginMutation, { loading, error, data }] = useMutation<\r\n    loginMutation,\r\n    loginMutationVariables\r\n  >(LOGIN_MUTATION, {\r\n    variables: {\r\n      loginInput: {\r\n        email: watch(\"email\"),\r\n        password: watch(\"password\"),\r\n      },\r\n    },\r\n  });\r\n*/\r\n  const onSubmit = () => {\r\n    if (!loading) {\r\n      const { email, password } = getValues();\r\n\r\n      loginMutation({\r\n        variables: {\r\n          loginInput: {\r\n            email,\r\n            password,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n  /*\r\n      handleSubmit은 form 입력값들이 유효할 경우 첫번째 인자로 전달받은 함수를\r\n      유효하지 않을 경우 두번째 인자로 전달받은 함수를 호출함\r\n    */\r\n\r\n  return (\r\n    <div className=\"h-screen flex items-center flex-col  mt-10 lg:mt-28\">\r\n      <Helmet>\r\n        <title>Login | Nuber Eats</title>\r\n      </Helmet>\r\n      <div className=\"w-full max-w-screen-sm flex flex-col px-5 items-center\">\r\n        <img src={nuberLogo} className=\"w-52 mb-5\" />\r\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\r\n          Welcome back\r\n        </h4>\r\n        <form\r\n          onSubmit={handleSubmit(onSubmit)}\r\n          className=\"grid gap-5 mt-5 w-full mb-5\"\r\n        >\r\n          <input\r\n            ref={register({\r\n              required: \"Email is required\",\r\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n            })}\r\n            placeholder=\"Email\"\r\n            required\r\n            type=\"email\"\r\n            name=\"email\"\r\n            className=\"input\"\r\n          />\r\n          {errors.email?.message && (\r\n            <FormError errorMessage={errors.email.message} />\r\n          )}\r\n          {errors.email?.type === \"pattern\" && (\r\n            <FormError errorMessage={\"Please enter a valid email\"} />\r\n          )}\r\n          <input\r\n            ref={register({ required: \"Password is required\", minLength: 10 })}\r\n            placeholder=\"Password\"\r\n            required\r\n            type=\"password\"\r\n            name=\"password\"\r\n            className=\"input\"\r\n          />\r\n          {errors.password?.message && (\r\n            <FormError errorMessage={errors.password.message} />\r\n          )}\r\n          {errors.password?.type === \"minLength\" && (\r\n            <FormError errorMessage={\"Password must be more than 10 chars.\"} />\r\n          )}\r\n          <Button\r\n            canClick={formState.isValid}\r\n            loading={loading}\r\n            actionText=\"Log in\"\r\n          />\r\n          {loginMutationResult?.login.error && (\r\n            <FormError errorMessage={loginMutationResult.login.error} />\r\n          )}\r\n        </form>\r\n        <div>\r\n          New to Nuber?{\" \"}\r\n          <Link to=\"/create-account\" className=\"text-lime-600 hover:underline\">\r\n            Create an Account\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\create-account.tsx",["114","115","116","117","118","119"],"D:\\project_javascript\\nuber-eats-frontend\\src\\components\\form-error.tsx",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\components\\button.tsx",[],["120","121"],"D:\\project_javascript\\nuber-eats-frontend\\src\\constants.ts",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\404.tsx",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\components\\header.tsx",[],["122","123"],"D:\\project_javascript\\nuber-eats-frontend\\src\\hooks\\useMe.tsx",[],["124","125"],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx",["126","127","128","129"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport {\r\n  verifyEmail,\r\n  verifyEmailVariables,\r\n} from \"../../__generated__/verifyEmail\";\r\n\r\nconst VERIFY_EMAIL_MUTATION = gql`\r\n  mutation verifyEmail($input: VerifyEmailInput!) {\r\n    verifyEmail(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ConfirmEmail = () => {\r\n  const { data: userData, refetch } = useMe();\r\n\r\n  const client = useApolloClient();\r\n  const history = useHistory();\r\n\r\n  const onCompleted = async (data: verifyEmail) => {\r\n    const {\r\n      verifyEmail: { ok },\r\n    } = data;\r\n\r\n    if (ok && userData?.me.id) {\r\n      //await refetch();\r\n      /*\r\n        [Fragment]\r\n        Fragment를 사용하지 않고 Refetch를 사용하면 Backend에서 데이터를 새로 가져와서 Cache를 업데이트함\r\n        따라서 Fragment를 사용하는게 더 속도가 빠름\r\n\r\n        write data to cache directly through 'writeFragment'\r\n        fragment는 type의 일종임\r\n        id를 가지고 cache에 있는 fragment를 찾을 수 있음\r\n\r\n        아래 구문은 type이 User인 fragment중 id 가 User:${userData.me.id}인 것을 찾고\r\n        찾은 fragment의 데이터중 verified를 true로 바꾸는 내용임\r\n\r\n        (Chrome의 개발자 도구중 Apollo탭에서 cache로 가면 fragment들을 볼 수 있음)\r\n      */\r\n      client.writeFragment({\r\n        id: `User:${userData?.me.id}`,\r\n        fragment: gql`\r\n          fragment VerifiedUser on User {\r\n            verified\r\n          }\r\n        `,\r\n        data: {\r\n          verified: true,\r\n        },\r\n      });\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\r\n    VERIFY_EMAIL_MUTATION,\r\n    {\r\n      onCompleted,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    const [_, code] = window.location.href.split(\"code=\");\r\n    verifyEmail({\r\n      variables: {\r\n        input: {\r\n          code,\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\r\n      <Helmet>\r\n        <title>Verify Email | Nuber Eats</title>\r\n      </Helmet>\r\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming email...</h2>\r\n      <h4 className=\"text-gray-700 text-sm\">\r\n        Please wait, don't close this page...\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx",["130","131","132","133"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Button } from \"../../components/button\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport {\r\n  editProfile,\r\n  editProfileVariables,\r\n} from \"../../__generated__/editProfile\";\r\n\r\nconst EDIT_PROFILE_MUTATION = gql`\r\n  mutation editProfile($input: EditProfileInput!) {\r\n    editProfile(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\ninterface IFormProps {\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\nexport const EditProfile = () => {\r\n  const { data: userData, refetch: refreshUser } = useMe();\r\n  const client = useApolloClient();\r\n\r\n  const onCompleted = async (data: editProfile) => {\r\n    const {\r\n      editProfile: { error, ok },\r\n    } = data;\r\n\r\n    if (ok && userData) {\r\n      //await refreshUser();\r\n      //속도를 위해 Refetch대신 Fragment 사용하였음\r\n      const {\r\n        me: { email: prevEmail, id },\r\n      } = userData;\r\n      const { email: newEmail } = getValues();\r\n\r\n      if (prevEmail !== newEmail) {\r\n        //update the cache\r\n        /*\r\n        write data to cache directly through 'writeFragment'\r\n        fragment는 type의 일종임\r\n        id를 가지고 cache에 있는 fragment를 찾을 수 있음\r\n\r\n        아래 구문은 type이 User인 fragment중 id 가 User:${userData.me.id}인 것을 찾고\r\n        찾은 fragment의 데이터중 email을 바꾸는 내용임\r\n\r\n        (Chrome의 개발자 도구중 Apollo탭에서 cache로 가면 fragment들을 볼 수 있음)\r\n      */\r\n        client.writeFragment({\r\n          id: `User:${id}`,\r\n          fragment: gql`\r\n            fragment EditedUser on User {\r\n              verified\r\n              email\r\n            }\r\n          `,\r\n          data: {\r\n            verified: false,\r\n            email: newEmail,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const [editProfile, { loading }] = useMutation<\r\n    editProfile,\r\n    editProfileVariables\r\n  >(EDIT_PROFILE_MUTATION, {\r\n    onCompleted,\r\n  });\r\n\r\n  const { register, handleSubmit, getValues, formState } = useForm<IFormProps>({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      email: userData?.me.email,\r\n    },\r\n  });\r\n  const onSubmit = () => {\r\n    const { email, password } = getValues();\r\n\r\n    editProfile({\r\n      variables: {\r\n        input: {\r\n          email,\r\n          ...(password !== \"\" && { password }),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col justify-center items-center\">\r\n      <Helmet>\r\n        <title>Edit Profile | Nuber Eats</title>\r\n      </Helmet>\r\n      <h4 className=\"font-semibold text-2xl mb-3\">Edit Profile</h4>\r\n      <form\r\n        className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\"\r\n        onSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <input\r\n          ref={register({\r\n            pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n          })}\r\n          className=\"input\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n        />\r\n        <input\r\n          ref={register()}\r\n          className=\"input\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n        />\r\n        <Button\r\n          loading={loading}\r\n          canClick={formState.isValid}\r\n          actionText=\"Save Profile\"\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","D:\\project_javascript\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\components\\restaurant.tsx",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\search.tsx",["134","135"],"import React, { useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { gql, useLazyQuery } from \"@apollo/client\";\r\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport {\r\n  searchRestaurant,\r\n  searchRestaurantVariables,\r\n} from \"../../__generated__/searchRestaurant\";\r\n\r\nconst SEARCH_RESTAURANT = gql`\r\n  query searchRestaurant($input: SearchRestaurantInput!) {\r\n    searchRestaurant(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      restaurants {\r\n        ...RestaurantParts\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n`;\r\n\r\nexport const Search = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [callQuery, { loading, data, called }] = useLazyQuery<\r\n    searchRestaurant,\r\n    searchRestaurantVariables\r\n  >(SEARCH_RESTAURANT);\r\n\r\n  useEffect(() => {\r\n    const [_, query] = location.search.split(\"?term=\");\r\n    if (!query) {\r\n      //history.push(\"/\");\r\n      //push와 다르게 replace는 history에 기록을 남기지 않음. 현재 페이지를 그냥 새로운 페이지로 대체해버림\r\n      return history.replace(\"/\");\r\n    }\r\n    callQuery({\r\n      variables: {\r\n        input: {\r\n          page: 1,\r\n          query,\r\n        },\r\n      },\r\n    });\r\n  }, [history, location]);\r\n\r\n  console.log(loading, data, called);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Search | Nuber Eats</title>\r\n      </Helmet>\r\n      <h1>Search Page</h1>\r\n    </div>\r\n  );\r\n};\r\n","D:\\project_javascript\\nuber-eats-frontend\\src\\fragments.ts",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\category.tsx",["136","137","138"],"import { gql, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport { category, categoryVariables } from \"../../__generated__/category\";\r\n\r\nconst CATEGORY_QUERY = gql`\r\n  query category($input: CategoryInput!) {\r\n    category(input: $input) {\r\n      ok\r\n      error\r\n      totalPages\r\n      totalResults\r\n      restaurants {\r\n        ...RestaurantParts\r\n      }\r\n      category {\r\n        ...CategoryParts\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${CATEGORY_FRAGMENT}\r\n`;\r\n\r\ninterface ICategoryParams {\r\n  slug: string;\r\n}\r\n\r\nexport const Category = () => {\r\n  /*\r\n  useParams를 이용해서 Router에서 :파라미터명 형태로 전달된 query parameter를 가져올 수 있음\r\n  */\r\n  const params = useParams<ICategoryParams>();\r\n  const { data, loading } = useQuery<category, categoryVariables>(\r\n    CATEGORY_QUERY,\r\n    {\r\n      variables: {\r\n        input: {\r\n          page: 1,\r\n          slug: params.slug,\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  console.log(data);\r\n\r\n  return <h1>Category</h1>;\r\n};\r\n","D:\\project_javascript\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx",["139"],"D:\\project_javascript\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx",[],"D:\\project_javascript\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"140","replacedBy":"146"},{"ruleId":"142","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":10,"nodeType":"150","messageId":"151","endLine":1,"endColumn":21},{"ruleId":"148","severity":1,"message":"152","line":37,"column":5,"nodeType":"150","messageId":"151","endLine":37,"endColumn":10},{"ruleId":"148","severity":1,"message":"153","line":45,"column":16,"nodeType":"150","messageId":"151","endLine":45,"endColumn":21},{"ruleId":"148","severity":1,"message":"153","line":57,"column":16,"nodeType":"150","messageId":"151","endLine":57,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":100,"column":9,"nodeType":"156","endLine":100,"endColumn":54},{"ruleId":"157","severity":1,"message":"158","line":111,"column":34,"nodeType":"159","messageId":"160","endLine":111,"endColumn":35,"suggestions":"161"},{"ruleId":"157","severity":1,"message":"158","line":111,"column":59,"nodeType":"159","messageId":"160","endLine":111,"endColumn":60,"suggestions":"162"},{"ruleId":"148","severity":1,"message":"152","line":36,"column":5,"nodeType":"150","messageId":"151","endLine":36,"endColumn":10},{"ruleId":"148","severity":1,"message":"153","line":48,"column":28,"nodeType":"150","messageId":"151","endLine":48,"endColumn":33},{"ruleId":"148","severity":1,"message":"153","line":60,"column":16,"nodeType":"150","messageId":"151","endLine":60,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":89,"column":9,"nodeType":"156","endLine":89,"endColumn":54},{"ruleId":"157","severity":1,"message":"158","line":100,"column":34,"nodeType":"159","messageId":"160","endLine":100,"endColumn":35,"suggestions":"163"},{"ruleId":"157","severity":1,"message":"158","line":100,"column":59,"nodeType":"159","messageId":"160","endLine":100,"endColumn":60,"suggestions":"164"},{"ruleId":"140","replacedBy":"165"},{"ruleId":"142","replacedBy":"166"},{"ruleId":"140","replacedBy":"167"},{"ruleId":"142","replacedBy":"168"},{"ruleId":"140","replacedBy":"169"},{"ruleId":"142","replacedBy":"170"},{"ruleId":"148","severity":1,"message":"171","line":2,"column":28,"nodeType":"150","messageId":"151","endLine":2,"endColumn":36},{"ruleId":"148","severity":1,"message":"172","line":21,"column":27,"nodeType":"150","messageId":"151","endLine":21,"endColumn":34},{"ruleId":"148","severity":1,"message":"173","line":70,"column":12,"nodeType":"150","messageId":"151","endLine":70,"endColumn":13},{"ruleId":"174","severity":1,"message":"175","line":78,"column":6,"nodeType":"176","endLine":78,"endColumn":8,"suggestions":"177"},{"ruleId":"148","severity":1,"message":"178","line":26,"column":36,"nodeType":"150","messageId":"151","endLine":26,"endColumn":47},{"ruleId":"148","severity":1,"message":"153","line":31,"column":22,"nodeType":"150","messageId":"151","endLine":31,"endColumn":27},{"ruleId":"157","severity":1,"message":"158","line":109,"column":32,"nodeType":"159","messageId":"160","endLine":109,"endColumn":33,"suggestions":"179"},{"ruleId":"157","severity":1,"message":"158","line":109,"column":57,"nodeType":"159","messageId":"160","endLine":109,"endColumn":58,"suggestions":"180"},{"ruleId":"148","severity":1,"message":"173","line":35,"column":12,"nodeType":"150","messageId":"151","endLine":35,"endColumn":13},{"ruleId":"174","severity":1,"message":"181","line":49,"column":6,"nodeType":"176","endLine":49,"endColumn":25,"suggestions":"182"},{"ruleId":"148","severity":1,"message":"183","line":2,"column":17,"nodeType":"150","messageId":"151","endLine":2,"endColumn":26},{"ruleId":"148","severity":1,"message":"184","line":3,"column":10,"nodeType":"150","messageId":"151","endLine":3,"endColumn":16},{"ruleId":"148","severity":1,"message":"185","line":36,"column":17,"nodeType":"150","messageId":"151","endLine":36,"endColumn":24},{"ruleId":"148","severity":1,"message":"185","line":29,"column":11,"nodeType":"150","messageId":"151","endLine":29,"endColumn":18},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],["186"],["187"],["186"],["187"],"@typescript-eslint/no-unused-vars","'ApolloError' is defined but never used.","Identifier","unusedVar","'watch' is assigned a value but never used.","'error' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["188","189"],["190","191"],["192","193"],["194","195"],["186"],["187"],["186"],["187"],["186"],["187"],"'useState' is defined but never used.","'refetch' is assigned a value but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","ArrayExpression",["196"],"'refreshUser' is assigned a value but never used.",["197","198"],["199","200"],"React Hook useEffect has a missing dependency: 'callQuery'. Either include it or remove the dependency array.",["201"],"'useEffect' is defined but never used.","'Helmet' is defined but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"202","fix":"203","desc":"204"},{"messageId":"205","fix":"206","desc":"207"},{"messageId":"202","fix":"208","desc":"204"},{"messageId":"205","fix":"209","desc":"207"},{"messageId":"202","fix":"210","desc":"204"},{"messageId":"205","fix":"211","desc":"207"},{"messageId":"202","fix":"212","desc":"204"},{"messageId":"205","fix":"213","desc":"207"},{"desc":"214","fix":"215"},{"messageId":"202","fix":"216","desc":"204"},{"messageId":"205","fix":"217","desc":"207"},{"messageId":"202","fix":"218","desc":"204"},{"messageId":"205","fix":"219","desc":"207"},{"desc":"220","fix":"221"},"removeEscape",{"range":"222","text":"223"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"224","text":"225"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"226","text":"223"},{"range":"227","text":"225"},{"range":"228","text":"223"},{"range":"229","text":"225"},{"range":"230","text":"223"},{"range":"231","text":"225"},"Update the dependencies array to be: [verifyEmail]",{"range":"232","text":"233"},{"range":"234","text":"223"},{"range":"235","text":"225"},{"range":"236","text":"223"},{"range":"237","text":"225"},"Update the dependencies array to be: [callQuery, history, location]",{"range":"238","text":"239"},[2848,2849],"",[2848,2848],"\\",[2873,2874],[2873,2873],[2641,2642],[2641,2641],[2666,2667],[2666,2666],[1963,1965],"[verifyEmail]",[2835,2836],[2835,2835],[2860,2861],[2860,2860],[1280,1299],"[callQuery, history, location]"]